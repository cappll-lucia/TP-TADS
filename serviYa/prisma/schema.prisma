generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://serviya:LKJ741zxc@cluster0.ezxkjig.mongodb.net/serviYa?retryWrites=true"
}

model AuthUser {
  id           String        @id @map("_id")
  name         String
  email        String        @unique
  role         String
  city_id      String?       @db.ObjectId
  city         City?         @relation(references: [id], fields: [city_id], onDelete: Cascade)
  auth_session AuthSession[]
  auth_key     AuthKey[]

  services_id           String[]      @db.ObjectId
  services              Service[]     @relation(references: [id], fields: [services_id])
  phone                 String?
  description           String?
  appointmens_to_attend Appointment[] @relation("profesional_appointment")
  asked_appointments    Appointment[] @relation("client_appointment")

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @map("_id")
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @map("_id")
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Service {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  auth_user_id String[]
  auth_user    AuthUser[] @relation(fields: [auth_user_id], references: [id])

  @@map("service")
}

model City {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  province String
  users    AuthUser[]

  @@map("city")
}

model Province {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  @@map("province")
}

model Appointment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  profesional_id String
  profesional    AuthUser         @relation("profesional_appointment", references: [id], fields: [profesional_id], onDelete: Cascade)
  client_id      String
  client         AuthUser         @relation("client_appointment", references: [id], fields: [client_id], onDelete: Cascade)
  date           DateTime
  description    String
  state          AppointmentState

  @@index([profesional_id])
  @@map("appointment")
}

enum AppointmentState {
  ACCEPTED
  REJECTED
  DONE
  PENDING
}
